from telebot import types

import main_menu
import price_management
import sql_requests

price_mngmnt = price_management.PriceManagement()


# –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def create_item_view_page(item_id):
    message_text = sql_requests.get_url_by_item(item_id)
    markup = types.InlineKeyboardMarkup()
    row = [types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back-to-pagination"),
           types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑", callback_data="save-to-preorder" + item_id)]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
def create_preorder_page(preorder):
    items_with_attributes = []
    message_text = '<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n'
    markup = types.InlineKeyboardMarkup()

    for item in preorder.get_item_list():
        items_with_attributes.append(sql_requests.get_thing_by_ID(item))  # –ü–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for item in items_with_attributes:
        if item[1] is not None:
            message_text += 'üìå<b>' + item[1].upper() + '</b>\n'
        if item[4] is not None:
            message_text += '–†–∞–∑–º–µ—Ä: ' + item[4] + '\n'
        if item[5] is not None:
            message_text += '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞: ' + item[5] + '\n'
        message_text += '\n'
    price_parameters = price_mngmnt.get_preorder_price_with_discount(preorder)
    if price_parameters['discount'] != '0':
        message_text += '\n–°—É–º–º–∞: ' + price_parameters['full_preorder_price'] + '–†.\n'
        message_text += '–°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–º–ø–ª–µ–∫—Ç: ' + price_parameters['discount'] + '–†.\n'
        message_text += '<b>–ò—Ç–æ–≥–æ: ' + price_parameters['preorder_price'] + '–†.</b>\n'
    else:
        message_text += '\n–°—É–º–º–∞: ' + price_parameters['full_preorder_price'] + '–†.\n'
    row = [types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ", callback_data="go-to-pagination"),
           types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="save-preorder")]
    markup.row(*row)
    row = [types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="edit-preorder")]
    markup.row(*row)
    row = [types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="delete-preorder")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


# –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
def create_edit_preorder_page(items_list):
    if items_list:
        preorder_items = []
        message_text = '<b>–í–∞—à –∑–∞–∫–∞–∑(–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï):</b>\n\n'
        markup = types.InlineKeyboardMarkup()

        for item in items_list:
            preorder_items.append(sql_requests.get_thing_by_ID(item))
        for item in preorder_items:
            if item[1] is not None:
                message_text += '<b>' + item[1].upper() + '</b>\n'
            if item[4] is not None:
                message_text += '–†–∞–∑–º–µ—Ä: ' + item[4] + '\n'
            if item[5] is not None:
                message_text += '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞: ' + item[5] + '\n'
            message_text += '<b>–£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞:</b> /delete_from_preorder_' + str(item[0]) + '\n\n'
            #  callback_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–µ "–Ω–µ—Ç" –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
        row = [types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="go-to-preorder")]
        markup.row(*row)
        row = [types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="delete-preorder")]
        markup.row(*row)
        message = {'message_text': message_text, 'markup': markup}
    else:
        message = main_menu.create_main_menu(())
    return message


# —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
def create_delete_approve_page(items_list):
    if items_list:
        preorder_items = []
        message_text = '<b>–í–´ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –•–û–¢–ò–¢–ï –£–î–ê–õ–ò–¢–¨ –°–í–û–ô –ó–ê–ö–ê–ó?</b>\n\n'
        markup = types.InlineKeyboardMarkup()

        for item in items_list:
            preorder_items.append(sql_requests.get_thing_by_ID(item))
        for item in preorder_items:
            if item[1] is not None:
                message_text += '<b>' + item[1].upper() + '</b>\n'
            if item[4] is not None:
                message_text += '–†–∞–∑–º–µ—Ä: ' + item[4] + '\n'
            if item[5] is not None:
                message_text += '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞: ' + item[5] + '\n\n'

        row = [types.InlineKeyboardButton("–î–∞", callback_data="delete-preorder-yes"),
               types.InlineKeyboardButton("–ù–µ—Ç", callback_data="go-to-preorder")]
        markup.row(*row)
        message = {'message_text': message_text, 'markup': markup}
    else:
        message = main_menu.create_main_menu({})
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def create_ask_phone_page(customer_phone):
    message_text = ''
    markup = types.InlineKeyboardMarkup()
    if customer_phone is not None:
        message_text += "<b>–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: " + customer_phone + "?</b>"
        row = [types.InlineKeyboardButton("–î–∞", callback_data="phone-approved"),
               types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="change-phone-number")]
        markup.row(*row)
    else:
        message_text += "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏\n" \
                        "–≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>79xxxxxxxxx</b>"
    row = [types.InlineKeyboardButton("‚¨Ö –ö –∑–∞–∫–∞–∑—É", callback_data="go-to-preorder")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
def create_ask_again_phone_page():
    message_text = '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n' \
                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.\n' \
                   '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>79xxxxxxxxx</b>'
    markup = types.InlineKeyboardMarkup()
    row = [types.InlineKeyboardButton("‚¨Ö –ö –∑–∞–∫–∞–∑—É", callback_data="go-to-preorder")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
def create_change_phone_number_page():
    message_text = "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏\n" \
                "–≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>79xxxxxxxxx</b>"
    markup = types.InlineKeyboardMarkup()
    row = [types.InlineKeyboardButton("‚¨Ö –ö –∑–∞–∫–∞–∑—É", callback_data="go-to-preorder")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—á–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
def create_preorder_posted_page():
    markup = types.InlineKeyboardMarkup()
    message_text = '–°–ø–∞—Å–∏–±–æ!\n' \
                   '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n' \
                   '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    row = [types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back-to-main-menu")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


#  –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—á–∫—É, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â—É—é –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
def create_warning_change_date_page():
    message_text = ''
    markup = types.InlineKeyboardMarkup()
    message_text += '<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> \n' \
                    '–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.\n' \
                    '–ù–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ'
    row = [types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_preorder_date_approved"),
           types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="go-to-pagination")]
    markup.row(*row)
    message = {'message_text': message_text, 'markup': markup}
    return message


